// Code generated by MockGen. DO NOT EDIT.
// Source: tasks.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"
	entity "rodnik/internal/entity"

	gomock "github.com/golang/mock/gomock"
)

// MockRepoTasks is a mock of RepoTasks interface.
type MockRepoTasks struct {
	ctrl     *gomock.Controller
	recorder *MockRepoTasksMockRecorder
}

// MockRepoTasksMockRecorder is the mock recorder for MockRepoTasks.
type MockRepoTasksMockRecorder struct {
	mock *MockRepoTasks
}

// NewMockRepoTasks creates a new mock instance.
func NewMockRepoTasks(ctrl *gomock.Controller) *MockRepoTasks {
	mock := &MockRepoTasks{ctrl: ctrl}
	mock.recorder = &MockRepoTasksMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepoTasks) EXPECT() *MockRepoTasksMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepoTasks) Create(ctx context.Context, task *entity.Task) (*entity.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, task)
	ret0, _ := ret[0].(*entity.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepoTasksMockRecorder) Create(ctx, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepoTasks)(nil).Create), ctx, task)
}
